#version 330 core

in vec3 myNormal;
in vec3 worldPos;

out vec4 color;

uniform vec3 objectColor;  
uniform vec3 lightColor;
uniform vec3 lampPos;
uniform vec3 viewPos;

void main()
{
     // Ambient
    float ambientStrength = 0.3f;
    vec3 ambient = ambientStrength * lightColor;

    // Diffuse 
    vec3 normedNorm = normalize(myNormal);
	vec3 lightDir = normalize(lampPos - worldPos); //tiene que ser en esta direccion (luz->objecto)
    float diff = max(dot(normedNorm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
	
	//Specular
	float specularStrength = 0.5f;
	vec3 viewDir = normalize(viewPos - worldPos); //el vector camera-fragmento
	vec3 reflectDir = reflect(-lightDir, normedNorm); 
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 128); //el 32 es lo concentrada que esta la luz
	vec3 specular = specularStrength * spec * lightColor;
	
	//Final
    vec3 result = (ambient + diffuse + specular) * objectColor;
    color = vec4(result, 1.0f);
}