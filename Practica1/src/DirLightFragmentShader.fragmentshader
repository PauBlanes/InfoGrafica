#version 330 core
struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float     shininess;
};

in vec3 myNormal;
in vec3 worldPos;
in vec2 TextCoords;

out vec4 color;

uniform Material myMat;
uniform vec3 ambientColor;
uniform vec3 diffuseColor;
uniform vec3 specularColor;
uniform vec3 viewPos;
uniform vec3 lightDir;

void main()
{
    // Ambient
    float ambientStrength = 0.3f;
    vec3 ambient = ambientStrength * ambientColor * vec3(texture(myMat.diffuse, TextCoords));

    // Diffuse 
    vec3 normedNorm = normalize(myNormal);
	float diff = max(dot(normedNorm, -lightDir), 0.0); //el cos entre vector llum i la normal.com que els tenim normalitzats i llavors hipotenusa es 1, no volem que sigui negatiu pq fa efectes raros
    vec3 diffuse = diff * diffuseColor * vec3(texture(myMat.diffuse, TextCoords));
	
	//Specular
	float specularStrength = 0.5f;
	vec3 viewDir = normalize(viewPos - worldPos);
	vec3 reflectDir = reflect(lightDir, normedNorm); //negatiu el lightDir pq la funcio reflect l'espera en l'altre direccio
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), myMat.shininess); //elevem el cosino entre el reflex i la camera. el numero que elevem es lo concentrat que esta el reflex
	vec3 specular = specularStrength * spec * specularColor * vec3(texture(myMat.specular, TextCoords));
	
	//Final
    vec3 finalColor = (ambient + diffuse + specular);
    color = vec4(finalColor, 1.0f);
}