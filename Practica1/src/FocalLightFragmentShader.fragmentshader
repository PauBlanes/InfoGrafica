#version 330 core
struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float     shininess;
};

in vec3 myNormal;
in vec3 worldPos;
in vec2 TextCoords;

out vec4 color;
uniform Material myMat;
uniform vec3 ambientColor;
uniform vec3 diffuseColor;
uniform vec3 specularColor;
uniform vec3 viewPos;

uniform vec3 lightPos;
uniform float cosAperturaMax;
uniform float cosAperturaMin;
uniform vec3 Fdir;

void main()
{		
	//ahora comprovar si esta dentro del foco
	vec3 lightDir = normalize(lightPos - worldPos);
	float theta = dot(lightDir,normalize(-Fdir));
	
	if (theta > cosAperturaMax) { //estara dentro
		// Ambient
        float ambientStrength = 0.3f;
		vec3 ambient = ambientStrength * ambientColor * vec3(texture(myMat.diffuse, TextCoords));
        
        // Diffuse 
        vec3 norm = normalize(myNormal);        
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = diffuseColor * diff * vec3(texture(myMat.diffuse, TextCoords));  
        
        // Specular
        vec3 viewDir = normalize(viewPos - worldPos);
        vec3 reflectDir = reflect(-lightDir, norm);  
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), myMat.shininess);
        vec3 specular = specularColor * spec * vec3(texture(myMat.specular, TextCoords));
        
		//intensidad dentro
		float epsilon   = cosAperturaMin - cosAperturaMax;
		float intensity = clamp((theta - cosAperturaMax) / epsilon, 0.0, 1.0); 
		diffuse  *= intensity;
		specular *= intensity;

        // Attenuation
        float d  = length(lightPos - worldPos);
        float att = 1.0f / (1+0.09*d+(0.032*pow(d,2)));    

        diffuse  *= att;
        specular *= att;   
                
        color = vec4((ambient + diffuse + specular), 1.0f);
		
	}
	else {
		vec3 ambient = ambientColor * vec3(texture(myMat.specular, TextCoords));
		color = vec4(ambient,1.0f);
	}
	
    
}