#version 330 core

in vec3 myNormal;
in vec3 worldPos;

out vec4 color;

uniform vec3 objectColor;  
uniform vec3 ambientColor;
uniform vec3 diffuseColor;
uniform vec3 specularColor;
uniform vec3 viewPos;

uniform vec3 Lightpos;
uniform float cosAperturaMax;
uniform float cosAperturaMin;
uniform vec3 Fdir;

void main()
{	
		
	//ahora comprovar si esta dentro del foco
	vec3 lightDir = normalize(Lightpos - worldPos);
	float theta = dot(lightDir,normalize(-Fdir));
	
	if (theta > cosAperturaMax) { //estara dentro
		// Ambient
        vec3 ambient = ambientColor * objectColor;
        
        // Diffuse 
        vec3 norm = normalize(myNormal);        
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = diffuseColor * diff * objectColor;  
        
        // Specular
        vec3 viewDir = normalize(viewPos - worldPos);
        vec3 reflectDir = reflect(-lightDir, norm);  
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
        vec3 specular = specularColor * spec * objectColor;
        
		//intensidad dentro
		float epsilon   = cosAperturaMin - cosAperturaMax;
		float intensity = clamp((theta - cosAperturaMax) / epsilon, 0.0, 1.0); 
		diffuse  *= intensity;
		specular *= intensity;

        // Attenuation
        float d  = length(Lightpos - worldPos);
        float att = 1.0f / (1+0.22*d+(0.2*pow(d,2)));    

        diffuse  *= att;
        specular *= att;   
                
        color = vec4(ambient + diffuse + specular, 1.0f); 
	}
	else {
		vec3 ambient = ambientColor * objectColor;
		color = vec4(ambient, 1.0f);
	}
	
    
}